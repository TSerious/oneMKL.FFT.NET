# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  Solution_Name: oneMKL.FFT.NET.sln                        # Replace with your solution name, i.e. MyWpfApp.sln.
  DOTNET_CLI_TELEMETRY_OPTOUT: "true"
  BUILD_NUMBER: "${{ github.run_number }}"  # relevant for sem-file-ver from GitVersion (see ./GitVersion.yml)

jobs:
  determine-version:
    name: Determine Application Version
    runs-on: windows-latest
    outputs:
      sem-ver: ${{ steps.determine-version.outputs.GitVersion_SemVer }}
      assembly-sem-ver: ${{ steps.determine-version.outputs.GitVersion_AssemblySemVer }}
      assembly-sem-file-ver: ${{ steps.determine-version.outputs.GitVersion_AssemblySemFileVer }}
      assembly-informational-version: ${{ steps.determine-version.outputs.GitVersion_InformationalVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.2.1
        with:
          versionSpec: '6.0.x'
          preferLatestVersion: true

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false

      - name: Determine Version
        id: determine-version
        uses: gittools/actions/gitversion/execute@v3.2.1
        with:
          useConfigFile: true

  build:
    needs: determine-version
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print version
        run: |
          echo "sem-ver: ${{ needs.determine-version.outputs.sem-ver }}"
          echo "ass-ver: ${{ needs.determine-version.outputs.assembly-sem-ver }}"
          echo "file-ver: ${{ needs.determine-version.outputs.assembly-sem-file-ver }} "
          echo "info-ver: ${{ needs.determine-version.outputs.assembly-informational-version }} "

      # Install the .NET Core workload
      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          
      - name: Restore
        shell: pwsh
        run: dotnet restore --no-cache --force oneMKL.FFT.NET\oneMKL.FFT.NET.csproj

      - name: Build Package
        shell: pwsh
        # Overview of the different versions: https://gist.github.com/jonlabelle/34993ee032c26420a0943b1c9d106cdc
        run: |
          dotnet build --no-restore`
            oneMKL.FFT.NET/oneMKL.FFT.NET.csproj `
            -p:Version=${{ needs.determine-version.outputs.assembly-sem-file-ver }} `
            -p:FileVersion=${{ needs.determine-version.outputs.assembly-sem-file-ver }} `
            -p:AssemblyVersion=${{ needs.determine-version.outputs.assembly-sem-file-ver }} `
            -p:AssemblyInformationalVersion=${{ needs.determine-version.outputs.assembly-informational-version }} `
            -p:PackageVersion=${{ needs.determine-version.outputs.assembly-sem-file-ver }} `
            -p:Configuration=Release `
            --warnaserror

      - name: Upload NuGet Package
        uses: actions/upload-artifact@v3
        with:  
          name: nuget-package
          path: ./oneMKL.FFT.NET/bin/*.nupkg
          if-no-files-found: error

